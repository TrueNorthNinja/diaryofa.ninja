---
import { getCollection, type CollectionEntry } from "astro:content";
import Layout from "../../layouts/Layout.astro";
import { Image } from "astro:assets";

export async function getStaticPaths() {
  const posts = await getCollection("blog");
  return posts.map((post) => ({
    params: { slug: post.slug },
    props: { post },
  }));
}

interface Props {
  post: CollectionEntry<"blog">;
}

const { post } = Astro.props;
const { title, description, pubDate, updatedDate, heroImage, tags } = post.data;
const { Content } = await post.render();

// Format dates
const formattedPubDate = pubDate.toLocaleDateString("en-us", {
  year: "numeric",
  month: "long",
  day: "numeric",
});

const formattedUpdatedDate = updatedDate?.toLocaleDateString("en-us", {
  year: "numeric",
  month: "long",
  day: "numeric",
});
---

<Layout title={title}>
  <main class="container mx-auto px-4 py-8 max-w-4xl">
    <article
      class="bg-monokai-bg rounded-lg shadow-lg overflow-hidden border border-monokai-purple/20"
    >
      {
        heroImage && (
          <div class="w-full overflow-hidden aspect-video">
            <Image
              src={heroImage}
              alt={`Cover image for ${title}`}
              width={1200}
              height={675}
              class="w-full object-cover h-full"
              format="webp"
              quality={80}
            />
          </div>
        )
      }

      <div class="p-8">
        <h1 class="text-4xl font-bold mb-4 text-monokai-red">
          {title}
        </h1>

        <div class="flex flex-wrap gap-2 mb-6">
          {
            tags &&
              tags.map((tag) => (
                <span class="px-3 py-1 bg-monokai-purple/20 text-monokai-yellow text-sm rounded-full">
                  {tag}
                </span>
              ))
          }
        </div>

        <div class="text-monokai-blue mb-8">
          <time datetime={pubDate.toISOString()}
            >Published: {formattedPubDate}</time
          >
          {
            updatedDate && (
              <div>
                <time datetime={updatedDate.toISOString()}>
                  Updated: {formattedUpdatedDate}
                </time>
              </div>
            )
          }
        </div>

        <div class="prose prose-lg max-w-none">
          <Content />
        </div>
      </div>
    </article>

    <div class="mt-8">
      <a
        href="/blog"
        class="inline-flex items-center px-4 py-2 bg-monokai-purple/20 text-monokai-fg rounded-md hover:bg-monokai-purple/30 transition-colors duration-300"
      >
        ‚Üê Back to Blog
      </a>
    </div>
  </main>
</Layout>
